// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SecretClient is an autogenerated mock type for the SecretClient type
type SecretClient struct {
	mock.Mock
}

// GenerateConsulToken provides a mock function with given fields: serviceKey
func (_m *SecretClient) GenerateConsulToken(serviceKey string) (string, error) {
	ret := _m.Called(serviceKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(serviceKey)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(serviceKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecret provides a mock function with given fields: secretName, keys
func (_m *SecretClient) GetSecret(secretName string, keys ...string) (map[string]string, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, secretName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (map[string]string, error)); ok {
		return rf(secretName, keys...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) map[string]string); ok {
		r0 = rf(secretName, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(secretName, keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretNames provides a mock function with given fields:
func (_m *SecretClient) GetSecretNames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfJWT provides a mock function with given fields: serviceKey
func (_m *SecretClient) GetSelfJWT(serviceKey string) (string, error) {
	ret := _m.Called(serviceKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(serviceKey)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(serviceKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsJWTValid provides a mock function with given fields: jwt
func (_m *SecretClient) IsJWTValid(jwt string) (bool, error) {
	ret := _m.Called(jwt)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(jwt)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(jwt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jwt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthToken provides a mock function with given fields: ctx, token
func (_m *SecretClient) SetAuthToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreSecret provides a mock function with given fields: secretName, data
func (_m *SecretClient) StoreSecret(secretName string, data map[string]string) error {
	ret := _m.Called(secretName, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(secretName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSecretClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretClient creates a new instance of SecretClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretClient(t mockConstructorTestingTNewSecretClient) *SecretClient {
	mock := &SecretClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
